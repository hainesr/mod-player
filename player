#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2018 Robert Haines.
#
# Licensed under the BSD License. See LICENCE for details.

require 'rubygems'
require 'bundler/setup'

require 'ffi/openmpt'
require 'ffi-portaudio'

file = ARGV[0].chomp
mod = ::FFI::OpenMPT::Module.new(file)

duration = mod.duration
duration_mins = duration.floor / 60
duration_secs = duration % 60

puts mod.title
puts "#{duration_mins}:#{duration_secs.round(3)}"

::FFI::PortAudio::API.Pa_Initialize
stream = ::FFI::Buffer.new(:pointer)
frames = ::FFI::PortAudio::API::FramesPerBufferUnspecified
flags = ::FFI::PortAudio::API::NoFlag
channels = 2

input = nil
output = ::FFI::PortAudio::API::PaStreamParameters.new
output[:device] = ::FFI::PortAudio::API.Pa_GetDefaultOutputDevice
output[:suggestedLatency] = ::FFI::PortAudio::API.Pa_GetDeviceInfo(output[:device])[:defaultHighOutputLatency]
output[:hostApiSpecificStreamInfo] = nil
output[:channelCount] = channels
output[:sampleFormat] = ::FFI::PortAudio::API::Float32

::FFI::PortAudio::API.Pa_OpenStream(stream, input, output, mod.sample_rate, frames, flags, nil, nil)
::FFI::PortAudio::API.Pa_StartStream(stream.read_pointer)

buffer_max_frames = ::FFI::PortAudio::API.Pa_GetStreamWriteAvailable(stream.read_pointer) * 2

# Set buffer to zero to begin with so we can render slience to start with.
buffer = ::FFI::MemoryPointer.new(:float, buffer_max_frames * channels, true)

at_exit do
  puts 'Module end...'

  buffer.free
  ::FFI::PortAudio::API.Pa_CloseStream(stream.read_pointer)
  ::FFI::PortAudio::API.Pa_Terminate
  mod.close
end

err_free_limit = 20
err_free_count = 0

# Fill the output stream with silence until we don't see any underruns
# for a while.
loop do
  can_write = ::FFI::PortAudio::API.Pa_GetStreamWriteAvailable(stream.read_pointer)

  next unless can_write.positive?

  err = ::FFI::PortAudio::API.Pa_WriteStream(stream.read_pointer, buffer, can_write)

  err_free_count = err == :paNoError ? err_free_count + 1 : err_free_limit

  break if err_free_count == err_free_limit
end

puts 'END ZEROS'

loop do
  can_write = ::FFI::PortAudio::API.Pa_GetStreamWriteAvailable(stream.read_pointer)

  next unless can_write.positive?

  has_read = mod.read_interleaved_float_stereo(can_write, buffer)

  break unless has_read.positive?

  ::FFI::PortAudio::API.Pa_WriteStream(stream.read_pointer, buffer, has_read)
end
