#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2018 Robert Haines.
#
# Licensed under the BSD License. See LICENCE for details.

lib = File.expand_path('lib', __dir__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'rubygems'
require 'bundler/setup'

require 'audio/portaudio'
require 'ffi/openmpt'
require 'curses'

Curses.init_screen
Curses.noecho
window = Curses.stdscr
window.nodelay = true

file = ARGV[0].chomp
mod = ::FFI::OpenMPT::Module.new(file)

audio = ModPlayer::PortAudio.new

duration = mod.duration
duration_mins = duration.floor / 60
duration_secs = duration % 60

puts mod.title
puts "#{duration_mins}:#{duration_secs.round(3)}"

audio.start

# Set buffer to zero to begin with so we can render slience to start with.
buffer_max_frames = audio.write_available * 2
buffer = ::FFI::MemoryPointer.new(:float, buffer_max_frames * audio.channels, true)

at_exit do
  buffer.free
  audio.stop
  mod.close
  Curses.close_screen

  puts 'Module end...'
end

err_free_limit = 20
err_free_count = 0

# Fill the output stream with silence until we don't see any underruns
# for a while.
loop do
  can_write = audio.write_available

  next unless can_write.positive?

  err = audio.write(buffer, can_write)

  err_free_count = err == :paNoError ? err_free_count + 1 : err_free_limit

  break if err_free_count == err_free_limit
end

loop do
  can_write = audio.write_available

  next unless can_write.positive?

  has_read = mod.read_interleaved_float_stereo(can_write, buffer)

  break unless has_read.positive?

  audio.write(buffer, has_read)

  ch = window.getch
  exit if ch == 'q'
end
